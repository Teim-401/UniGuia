import telebot 
from telebot import types
import logging

# Configurar logs para reducir mensajes en la terminal
logging.basicConfig(level=logging.CRITICAL)

# Conexi√≥n con nuestro BOT
TOKEN = '7567218231:AAF15mvlHY_8WDEQhPeLQeUjOzhLxAEnMvs'  
bot = telebot.TeleBot(TOKEN)  

# Creaci√≥n de comandos simples como '/Start' y '/Help' 
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 'üéì Bienvenido al Bot de Pensum de la Universidad de Oriente üìñ\n\nHola! Soy tu asistente para obtener informaci√≥n sobre los pensum de diferentes carreras universitarias.')

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """ü§ñ *Ayuda - Comandos disponibles* üìå

‚úÖ */start* ‚Üí Inicia el bot y recibe un mensaje de bienvenida.  
‚úÖ */help* ‚Üí Muestra esta lista de comandos y c√≥mo usarlos.  
‚úÖ */pensum* ‚Üí Selecciona tu carrera y recibe el pensum en PDF.  

üõ† *¬øC√≥mo funciona?*  
- Usa los comandos anteriores para interactuar con el bot.  
- Para obtener el pensum, selecciona tu carrera y el bot te enviar√° el archivo PDF.  

üì© *¬øNecesitas ayuda adicional?*  
Escr√≠beme y te asistir√© con cualquier duda. üöÄ"""
    
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

# Men√∫ de selecci√≥n de carrera (con botones normales)
@bot.message_handler(commands=['pensum'])
def send_pensum(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)

    # Creando botones
    carreras = [
        "Ingenier√≠a Civil", "Ingenier√≠a de Petr√≥leo", "Ingenier√≠a de Sistemas",
        "Ingenier√≠a El√©ctrica", "Ingenier√≠a en Computaci√≥n", "Ingenier√≠a Industrial",
        "Ingenier√≠a Mec√°nica", "Ingenier√≠a Qu√≠mica", "Arquitectura", "Medicina",
        "Contadur√≠a P√∫blica", "Turismo", "Tecnolog√≠a en Fabricaci√≥n Mec√°nica",
        "Tecnolog√≠a Electr√≥nica", "Administraci√≥n de Empresas"
    ]
    
    for carrera in carreras:
        markup.add(types.KeyboardButton(carrera))

    bot.send_message(message.chat.id, "Selecciona tu carrera:", reply_markup=markup)

# Manejo de la selecci√≥n de carrera y env√≠o de PDF + descripci√≥n
@bot.message_handler(func=lambda message: message.text in [
    "Ingenier√≠a Civil", "Ingenier√≠a de Petr√≥leo", "Ingenier√≠a de Sistemas",
    "Ingenier√≠a El√©ctrica", "Ingenier√≠a en Computaci√≥n", "Ingenier√≠a Industrial",
    "Ingenier√≠a Mec√°nica", "Ingenier√≠a Qu√≠mica", "Arquitectura", "Medicina",
    "Contadur√≠a P√∫blica", "Turismo", "Tecnolog√≠a en Fabricaci√≥n Mec√°nica",
    "Tecnolog√≠a Electr√≥nica", "Administraci√≥n de Empresas"
])
def send_selected_pensum(message):
    carrera = message.text

    # Diccionario con descripciones de cada carrera
    descripciones_carreras = {
        "Ingenier√≠a Civil": "Dise√±o, construcci√≥n y mantenimiento de infraestructuras como edificios y puentes.",
        "Ingenier√≠a de Petr√≥leo": "Exploraci√≥n y extracci√≥n de hidrocarburos para la producci√≥n de energ√≠a.",
        "Ingenier√≠a de Sistemas": "Desarrollo de software, estructura de datos y tecnolog√≠a inform√°tica.",
        "Ingenier√≠a El√©ctrica": "Estudio y aplicaci√≥n de sistemas el√©ctricos y generaci√≥n de energ√≠a.",
        "Ingenier√≠a en Computaci√≥n": "Dise√±o y desarrollo de hardware, redes y programaci√≥n avanzada.",
        "Ingenier√≠a Industrial": "Optimizaci√≥n de procesos y mejora de productividad en empresas.",
        "Ingenier√≠a Mec√°nica": "Dise√±o y desarrollo de maquinaria, motores y procesos mec√°nicos.",
        "Ingenier√≠a Qu√≠mica": "Aplicaci√≥n de procesos qu√≠micos en la producci√≥n industrial.",
        "Arquitectura": "Dise√±o y planificaci√≥n de espacios funcionales y est√©ticos.",
        "Medicina": "Diagn√≥stico y tratamiento de enfermedades en el √°mbito de la salud.",
        "Contadur√≠a P√∫blica": "Gesti√≥n financiera y administraci√≥n econ√≥mica en empresas.",
        "Turismo": "Planificaci√≥n y promoci√≥n de actividades tur√≠sticas.",
        "Tecnolog√≠a en Fabricaci√≥n Mec√°nica": "Procesos avanzados en manufactura y producci√≥n mec√°nica.",
        "Tecnolog√≠a Electr√≥nica": "Dise√±o y desarrollo de dispositivos electr√≥nicos.",
        "Administraci√≥n de Empresas": "Gesti√≥n de negocios, planificaci√≥n estrat√©gica y liderazgo organizacional."
    }

    # Diccionario con los archivos PDF correspondientes
    pensums_pdf = {
        "Ingenier√≠a Civil": "pensum_civil.pdf",
        "Ingenier√≠a de Petr√≥leo": "pensum_petroleo.pdf",
        "Ingenier√≠a de Sistemas": "pensum_sistemas.pdf",
        "Ingenier√≠a El√©ctrica": "pensum_electrica.pdf",
        "Ingenier√≠a en Computaci√≥n": "pensum_computacion.pdf",
        "Ingenier√≠a Industrial": "pensum_industrial.pdf",
        "Ingenier√≠a Mec√°nica": "pensum_mecanica.pdf",
        "Ingenier√≠a Qu√≠mica": "pensum_quimica.pdf",
        "Arquitectura": "pensum_arquitectura.pdf",
        "Medicina": "pensum_medicina.pdf",
        "Contadur√≠a P√∫blica": "pensum_contaduria.pdf",
        "Turismo": "pensum_turismo.pdf",
        "Tecnolog√≠a en Fabricaci√≥n Mec√°nica": "pensum_fabricacion.pdf",
        "Tecnolog√≠a Electr√≥nica": "pensum_electronica.pdf",
        "Administraci√≥n de Empresas": "pensum_administracion.pdf"
    }

    # Enviar descripci√≥n primero
    descripcion = descripciones_carreras.get(carrera, "Descripci√≥n no disponible.")
    bot.send_message(message.chat.id, f"üìå *{carrera}*\n{descripcion}", parse_mode="Markdown")

    # Luego enviar el PDF si existe
    pdf_file = pensums_pdf.get(carrera)
    if pdf_file:
        try:
            bot.send_document(message.chat.id, open(pdf_file, "rb"))
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"A√∫n no tengo el pensum de {carrera}. ¬°Pronto lo agregar√©!")
    else:
        bot.send_message(message.chat.id, "No encontr√© el pensum de esta carrera.")

# Mantener el bot activo
if __name__ == "__main__":
    bot.polling(none_stop=True, skip_pending=True)