import telebot 
from telebot import types
import logging

# Configurar logs para reducir mensajes en la terminal
logging.basicConfig(level=logging.CRITICAL)

# Conexi√≥n con nuestro BOT
TOKEN = '7567218231:AAF15mvlHY_8WDEQhPeLQeUjOzhLxAEnMvs'  
bot = telebot.TeleBot(TOKEN)  

# Creaci√≥n de comandos simples como '/Start' y '/Help' 
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 'üéì Bienvenido al Bot de Pensum de la Universidad de Oriente üìñ\n\nHola! Soy tu asistente para obtener informaci√≥n sobre los pensum de diferentes carreras universitarias.')

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """ü§ñ *Ayuda - Comandos disponibles* üìå

*/start* ‚Üí Inicia el bot y recibe un mensaje de bienvenida.  
*/help* ‚Üí Muestra esta lista de comandos y c√≥mo usarlos.  
*/pensum* ‚Üí Selecciona tu carrera y recibe el pensum en PDF o informaci√≥n detallada.  

üì© Escr√≠beme y te asistir√© con cualquier duda. üöÄ"""
    
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

# Men√∫ inicial con "Informaci√≥n" y "Solicitar Pensum"
@bot.message_handler(commands=['pensum'])
def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    info_btn = types.KeyboardButton("Informaci√≥n üìñ")
    pensum_btn = types.KeyboardButton("Solicitar Pensum üìÑ")
    
    markup.add(info_btn, pensum_btn)
    bot.send_message(message.chat.id, "Selecciona una opci√≥n:", reply_markup=markup)

# Men√∫ de selecci√≥n de carrera seg√∫n la opci√≥n elegida
@bot.message_handler(func=lambda message: message.text in ["Informaci√≥n üìñ", "Solicitar Pensum üìÑ"])
def send_career_menu(message):
    option = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    
    carreras = [
        "Ingenier√≠a Civil", "Ingenier√≠a de Petr√≥leo", "Ingenier√≠a de Sistemas",
        "Ingenier√≠a El√©ctrica", "Ingenier√≠a en Computaci√≥n", "Ingenier√≠a Industrial",
        "Ingenier√≠a Mec√°nica", "Ingenier√≠a Qu√≠mica", "Arquitectura", "Medicina",
        "Contadur√≠a P√∫blica", "Turismo", "Tecnolog√≠a en Fabricaci√≥n Mec√°nica",
        "Tecnolog√≠a Electr√≥nica", "Administraci√≥n de Empresas"
    ]

    for carrera in carreras:
        markup.add(types.KeyboardButton(carrera))

    bot.send_message(message.chat.id, f"Selecciona una carrera para {option.lower()}:", reply_markup=markup)

# Manejo de la selecci√≥n de carrera para enviar Pensum o Informaci√≥n
@bot.message_handler(func=lambda message: message.text in [
    "Ingenier√≠a Civil", "Ingenier√≠a de Petr√≥leo", "Ingenier√≠a de Sistemas",
    "Ingenier√≠a El√©ctrica", "Ingenier√≠a en Computaci√≥n", "Ingenier√≠a Industrial",
    "Ingenier√≠a Mec√°nica", "Ingenier√≠a Qu√≠mica", "Arquitectura", "Medicina",
    "Contadur√≠a P√∫blica", "Turismo", "Tecnolog√≠a en Fabricaci√≥n Mec√°nica",
    "Tecnolog√≠a Electr√≥nica", "Administraci√≥n de Empresas"
])
def send_selected_info_or_pensum(message):
    carrera = message.text

    # Diccionario con descripciones de cada carrera
    descripciones_carreras = {
        "Ingenier√≠a Civil": "Dise√±o, construcci√≥n y mantenimiento de infraestructuras como edificios y puentes.",
        "Ingenier√≠a de Petr√≥leo": "Exploraci√≥n y extracci√≥n de hidrocarburos para la producci√≥n de energ√≠a.",
        "Ingenier√≠a de Sistemas": "Desarrollo de software, estructura de datos y tecnolog√≠a inform√°tica.",
        "Ingenier√≠a El√©ctrica": "Estudio y aplicaci√≥n de sistemas el√©ctricos y generaci√≥n de energ√≠a.",
        "Ingenier√≠a en Computaci√≥n": "Dise√±o y desarrollo de hardware, redes y programaci√≥n avanzada.",
        "Ingenier√≠a Industrial": "Optimizaci√≥n de procesos y mejora de productividad en empresas.",
        "Ingenier√≠a Mec√°nica": "Dise√±o y desarrollo de maquinaria, motores y procesos mec√°nicos.",
        "Ingenier√≠a Qu√≠mica": "Aplicaci√≥n de procesos qu√≠micos en la producci√≥n industrial.",
        "Arquitectura": "Dise√±o y planificaci√≥n de espacios funcionales y est√©ticos.",
        "Medicina": "Diagn√≥stico y tratamiento de enfermedades en el √°mbito de la salud.",
        "Contadur√≠a P√∫blica": "Gesti√≥n financiera y administraci√≥n econ√≥mica en empresas.",
        "Turismo": "Planificaci√≥n y promoci√≥n de actividades tur√≠sticas.",
        "Tecnolog√≠a en Fabricaci√≥n Mec√°nica": "Procesos avanzados en manufactura y producci√≥n mec√°nica.",
        "Tecnolog√≠a Electr√≥nica": "Dise√±o y desarrollo de dispositivos electr√≥nicos.",
        "Administraci√≥n de Empresas": "Gesti√≥n de negocios, planificaci√≥n estrat√©gica y liderazgo organizacional."
    }

    # Diccionario con los archivos PDF correspondientes
    pensums_pdf = {
        "Ingenier√≠a Civil": "pensum_civil.pdf",
        "Ingenier√≠a de Petr√≥leo": "pensum_petroleo.pdf",
        "Ingenier√≠a de Sistemas": "pensum_sistemas.pdf",
        "Ingenier√≠a El√©ctrica": "pensum_electrica.pdf",
        "Ingenier√≠a en Computaci√≥n": "pensum_computacion.pdf",
        "Ingenier√≠a Industrial": "pensum_industrial.pdf",
        "Ingenier√≠a Mec√°nica": "pensum_mecanica.pdf",
        "Ingenier√≠a Qu√≠mica": "pensum_quimica.pdf",
        "Arquitectura": "pensum_arquitectura.pdf",
        "Medicina": "pensum_medicina.pdf",
        "Contadur√≠a P√∫blica": "pensum_contaduria.pdf",
        "Turismo": "pensum_turismo.pdf",
        "Tecnolog√≠a en Fabricaci√≥n Mec√°nica": "pensum_fabricacion.pdf",
        "Tecnolog√≠a Electr√≥nica": "pensum_electronica.pdf",
        "Administraci√≥n de Empresas": "pensum_administracion.pdf"
    }

    # Si el usuario pidi√≥ informaci√≥n
    if message.text == "Administraci√≥n de Empresas":
        bot.send_message(message.chat.id, "üìå *Administraci√≥n de Empresas* \n\nLa Licenciatura en Administraci√≥n de Empresas en la UDO forma profesionales para gestionar organizaciones de manera eficiente y eficaz.\n\nüîç Usa `/info_admin` para m√°s detalles.", parse_mode="Markdown")

    # Si el usuario pidi√≥ el pensum, enviamos el PDF
    pdf_file = pensums_pdf.get(carrera)
    if pdf_file:
        try:
            bot.send_document(message.chat.id, open(pdf_file, "rb"))
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"A√∫n no tengo el pensum de {carrera}. ¬°Pronto lo agregar√©!")

# Explicaci√≥n detallada con el comando /info_admin
@bot.message_handler(commands=['info_admin'])
def send_admin_detail(message):
    info_completa = """üéì *Administraci√≥n de Empresas - UDO* üìñ  

La Licenciatura en Administraci√≥n de Empresas en la UDO forma profesionales para gestionar organizaciones de manera eficiente y eficaz. El plan de estudios abarca √°reas como contabilidad, finanzas, mercadeo, recursos humanos, producci√≥n, econom√≠a, derecho, inform√°tica, administraci√≥n estrat√©gica y emprendimiento, combinando teor√≠a y pr√°ctica. Se busca desarrollar habilidades como liderazgo, comunicaci√≥n, trabajo en equipo, resoluci√≥n de problemas y pensamiento cr√≠tico, adapt√°ndose al entorno venezolano.  

Se recomiendan aptitudes como inter√©s por los negocios, habilidad num√©rica y anal√≠tica, organizaci√≥n, comunicaci√≥n efectiva, liderazgo, trabajo en equipo, pensamiento cr√≠tico, adaptabilidad, √©tica e inter√©s por la tecnolog√≠a, aunque la carrera tambi√©n ayuda a desarrollarlas. En resumen, la carrera busca formar profesionales integrales y adaptables al mundo empresarial."""

    bot.send_message(message.chat.id, info_completa, parse_mode="Markdown")

# Mantener el bot activo
if __name__ == "__main__":
    bot.polling(none_stop=True, skip_pending=True)